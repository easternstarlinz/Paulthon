from time import sleep
from random import randint
from selenium import webdriver
from pyvirtualdisplay import Display

class MuncherySpider():
        def __init__(self):
                self.url_to_crawl = "https://www.barchart.com/stocks/quotes/exel/options"
                self.all_items = []

        # Open headless chromedriver
        def start_driver(self):
                print('starting driver...')
                #self.display = Display(visible=0, size=(800, 600))
                #self.display.start()
                self.driver = webdriver.Chrome("/Users/paulwainer/Paulthon/crawler/chromedriver235/chromedriver")
                #self.driver.get('https://www.barchart.com')
                sleep(4)

        # Close chromedriver
        def close_driver(self):
                print('closing driver...')
                #self.display.stop()
                self.driver.quit()
                print('closed!')

        # Tell the browser to get a page
        def get_page(self, url):
                print('getting page...')
                self.driver.get(url)
                sleep(randint(2,3))

        # Munchery front gate page
        def login(self):
                print('getting past the gate page...')
                try:
                        form = self.driver.find_element_by_xpath('//*[@class="signup-login-form"]')
                        form.find_element_by_xpath('.//*[@class="user-input email"]').send_keys('iam@alexhoang.net')
                        form.find_element_by_xpath('.//*[@class="user-input zip-code"]').send_keys('94011')
                        #form.find_element_by_xpath('.//*[@class="large orange button"]').click()
                        form.find_element_by_xpath('.//*[@class="large orange button view-menu-button"]').click()
                        sleep(randint(3,5))
                except Exception as e:
                        #pass
                        print("Exception!: {}".format(e))

        def grab_list_items(self):
                print('grabbing list of items...')
                #for div in self.driver.find_elements_by_xpath('//ul[@class="menu-items row"]//li'):
                #for div in self.driver.find_elements_by_xpath('.//*[@class="bc-dropdown filter in-the-money"]'):
                for div in self.driver.find_elements_by_xpath('.//select[@class="ng-pristine ng-untouched ng-valid"]'):
                        #print(div.get_attribute('class'))
                        #print(div.text)
                        self.all_items.append(div.text)
                        data = self.process_elements(div)
                        #print(data)
                        if data:
                                self.all_items.append(data)
                        else:
                                #print('Found no data!')
                                pass
                print(self.all_items)
                for i in self.all_items:
                    print(i)
                    print(type(i))
                    for j in i:
                        print(j)
        def process_elements(self, div):
                prd_image = ''
                prd_title = ''

                try:
                        #prd_image = div.find_element_by_xpath('.//*[@class="item-photo"]').get_attribute("source")
                        prd_image = div.find_element_by_xpath('.//*[@class="item-photo"]').get_attribute("src")
                        prd_title = div.find_element_by_xpath('.//*[@class="item-title"]').text
                except Exception:
                        pass

                if prd_image and prd_title:
                        single_item_info = {
                                'image': prd_image.encode('UTF-8'),
                                'title': prd_title.encode('UTF-8')
                        }
                        return single_item_info
                else:
                        return False

        def parse(self):
                self.start_driver()
                self.get_page(self.url_to_crawl)
                #self.login()
                self.grab_list_items()
                #self.close_driver()

                if self.all_items:
                        return self.all_items
                else:
                        return False, False

                
# Run spider
Munchery = MuncherySpider()
items_list = Munchery.parse()

# Do something with the data touched
for item in items_list:
    print(item)
